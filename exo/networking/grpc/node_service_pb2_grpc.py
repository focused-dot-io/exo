# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from exo.networking.grpc import node_service_pb2 as exo_dot_networking_dot_grpc_dot_node__service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in exo/networking/grpc/node_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeServiceStub(object):
    """Node service for peer-to-peer operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetShardStatus = channel.unary_unary(
                '/exo.networking.grpc.NodeService/GetShardStatus',
                request_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.Shard.SerializeToString,
                response_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardStatus.FromString,
                _registered_method=True)
        self.TransferShard = channel.stream_stream(
                '/exo.networking.grpc.NodeService/TransferShard',
                request_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardChunk.SerializeToString,
                response_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.TransferStatus.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/exo.networking.grpc.NodeService/HealthCheck',
                request_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class NodeServiceServicer(object):
    """Node service for peer-to-peer operations
    """

    def GetShardStatus(self, request, context):
        """Check if a shard is available locally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferShard(self, request_iterator, context):
        """Transfer a shard to another node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetShardStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShardStatus,
                    request_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.Shard.FromString,
                    response_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardStatus.SerializeToString,
            ),
            'TransferShard': grpc.stream_stream_rpc_method_handler(
                    servicer.TransferShard,
                    request_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardChunk.FromString,
                    response_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.TransferStatus.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exo.networking.grpc.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('exo.networking.grpc.NodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Node service for peer-to-peer operations
    """

    @staticmethod
    def GetShardStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exo.networking.grpc.NodeService/GetShardStatus',
            exo_dot_networking_dot_grpc_dot_node__service__pb2.Shard.SerializeToString,
            exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferShard(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/exo.networking.grpc.NodeService/TransferShard',
            exo_dot_networking_dot_grpc_dot_node__service__pb2.ShardChunk.SerializeToString,
            exo_dot_networking_dot_grpc_dot_node__service__pb2.TransferStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exo.networking.grpc.NodeService/HealthCheck',
            exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckRequest.SerializeToString,
            exo_dot_networking_dot_grpc_dot_node__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
